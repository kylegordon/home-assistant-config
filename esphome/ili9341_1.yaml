---

## See also https://uk.banggood.com/Waveshare-7_5-Inch-E-ink-Screen-Module-800480-e-Paper-Display-SPI-Interface-7_5inch-e-Paper-HAT-(B)-For-Raspberry-Pi-p-1365284.html
## https://community.home-assistant.io/t/weatherstation-compass-needle/359176/16
## https://github.com/ofilis/esp32display/blob/main/esp32display.yaml
### Source glyph codes from https://pictogrammers.github.io/@mdi/font/5.3.45/

packages:
  common: !include common/common.yaml
  colors: !include common/colours.yaml

substitutions:  # substitute your own values in this section
  device_name: ili9341
  friendly_name: ili9341
  device_description: "Render text on an ILI9341 TFT display"
  static_ip: 192.168.1.254
  gateway: 192.168.1.1
  subnet: 255.255.255.0
  internal_temp_sensor: sensor.air_quality_meter_temperature #entity from Home Assistant
  outside_temp_sensor: sensor.outside_temperature #entity from Home Assistant
  weather_entity: weather.smhi_home #entity from Home Assistant
  todays_forecast_high_entity: sensor.todays_forecast_high #entity from Home Assistant
  todays_forecast_low_entity: sensor.todays_forecast_low #entity from Home Assistant
  todays_forecast_condition_entity: sensor.todays_forecast_condition
  tomorrows_forecast_high_entity: sensor.tomorrows_forecast_high
  tomorrows_forecast_low_entity: sensor.tomorrows_forecast_low
  tomorrows_forecast_condition_entity: sensor.tomorrows_forecast_condition

esphome:
  name: ${device_name}
  comment: ${device_description}
  platform: ESP32
  board: nodemcu-32s

captive_portal:

logger:

web_server:

time:
  - platform: homeassistant
    id: esptime
    timezone: Europe/London

font:
  - file: 'common/fonts/slkscr.ttf'
    id: slkscr8
    size: 8

  - file: 'common/fonts/BebasNeue-Regular.ttf'
    id: bebasneueregular20
    size: 20

  - file: 'common/fonts/arial.ttf'
    id: arial14
    size: 14

  - file: 'common/fonts/BebasNeue-Regular.ttf'
    id: fontlarge
    size: 64

  - file: 'common/fonts/SourceSansPro-Light.ttf'
    id: font1
    size: 14
  - file: 'common/fonts/SourceSansPro-SemiBold.ttf'
    id: font2
    size: 26
  - file: 'common/fonts/materialdesignicons-webfont.ttf'
    id: font3
    size: 35
    glyphs:
      - "\U000F0F55" #mdi:home-thermometer-outline
  - file: 'common/fonts/materialdesignicons-webfont.ttf'
    id: font4
    size: 70
    glyphs:
      - "\U000F0594"  # "clear-night"
      - "\U000F0590"  # "cloudy"
      - "\U000F0591"  # "fog"
      - "\U000F0592"  # "hail"
      - "\U000F0593"  # "lightning"
      - "\U000F067E"  # "lightning-rainy"
      - "\U000F0595"  # "partlycloudy"
      - "\U000F0596"  # "pouring"
      - "\U000F0597"  # "rainy"
      - "\U000F0598"  # "snowy"
      - "\U000F067F"  # "snowy-rainy"
      - "\U000F0599"  # "sunny"
      - "\U000F059D"  # "windy"
      - "\U000F059E"  # "windy-variant"
  - file: 'common/fonts/SourceSansPro-Bold.ttf'
    id: font5
    size: 60

sensor:
  - platform: homeassistant
    id: internet_speed_in
    entity_id: sensor.internet_speed_in
    internal: true

  - platform: homeassistant
    id: internet_speed_out
    entity_id: sensor.internet_speed_out
    internal: true

  - platform: homeassistant
    id: house_average_temperature
    entity_id: sensor.house_average_temperature
    internal: true

  - platform: homeassistant
    id: house_target_temperature
    entity_id: sensor.house_target_temperature
    internal: true

  - platform: homeassistant
    id: inside_temperature
    entity_id: $internal_temp_sensor
    internal: true

  - platform: homeassistant
    id: outside_temperature
    entity_id: $outside_temp_sensor
    internal: true

  - platform: homeassistant
    id: todays_forecast_high
    entity_id: $todays_forecast_high_entity
    internal: true

  - platform: homeassistant
    id: todays_forecast_low
    entity_id: $todays_forecast_low_entity
    internal: true

  - platform: homeassistant
    id: tomorrows_forecast_high
    entity_id: $tomorrows_forecast_high_entity
    internal: true

  - platform: homeassistant
    id: tomorrows_forecast_low
    entity_id: $tomorrows_forecast_low_entity
    internal: true

text_sensor:
  - platform: homeassistant
    id: next_bin
    entity_id: sensor.next_bin
    internal: true

  - platform: homeassistant
    id: weather_state
    name: "Current Weather Icon"
    entity_id: $weather_entity
    internal: true

  - platform: homeassistant
    id: tomorrows_forecast_condition
    entity_id: $tomorrows_forecast_condition_entity
    internal: true

  - platform: homeassistant
    id: todays_forecast_condition
    entity_id: $todays_forecast_condition_entity
    internal: true

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

color:
  - id: my_red
    red: 100%
    green: 3%
    blue: 5%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_background
    red: 60%
    green: 20%
    blue: 80%
  - id: my_golden
    red: 93%
    green: 80%
    blue: 38%

image:
  - id: bin
    file: "delete-empty.png"
    type: RGB24

display:
  - id: my_display
    platform: ili9341
    model: "TFT 2.4"
    cs_pin: 5
    dc_pin: 27
    reset_pin: 33
    rotation: 270
    pages:

      - id: weather
        lambda: |-
          it.filled_rectangle(0,  0, it.get_width(), it.get_height(), id(my_background));
          it.strftime(10, 10, id(font2), id(my_white), TextAlign::TOP_LEFT, "%A %d %b", id(esptime).now());
          // Print time in HH:MM format
          it.strftime(10, 40, id(font5), id(my_white), TextAlign::TOP_LEFT, "%H:%M", id(esptime).now());
          
          std::map<std::string, std::string> weather_icon_map
            {
              {"clear-night", "\U000F0594"},
              {"cloudy", "\U000F0590"},
              {"fog", "\U000F0591"},
              {"hail", "\U000F0592"},
              {"lightning", "\U000F0593"},
              {"lightning-rainy", "\U000F067E"},
              {"partlycloudy", "\U000F0595"},
              {"pouring", "\U000F0596"},
              {"rainy", "\U000F0597"},
              {"snowy", "\U000F0598"},
              {"snowy-rainy", "\U000F067F"},
              {"sunny", "\U000F0599"},
              {"windy", "\U000F059D"},
              {"windy-variant", "\U000F059E"},
            };

          if (id(weather_state).has_state()) {
            it.printf(220, 15, id(font4), id(my_golden), TextAlign::TOP_LEFT, weather_icon_map[id(weather_state).state.c_str()].c_str());
          }
          if (id(outside_temperature).has_state()) {
            it.printf(215, 80, id(font2), id(my_golden), TextAlign::TOP_LEFT, "%7.1f°", id(outside_temperature).state);
          }

          auto time = id(esptime).now();
          if (time.hour > 16) {
            it.printf(175, 135, id(font1), id(my_white), TextAlign::TOP_LEFT, "Tomorrows Forecast:");
            if (id(tomorrows_forecast_condition).has_state()) {
              it.printf(175, 155, id(font4), id(my_white), TextAlign::TOP_LEFT, weather_icon_map[id(tomorrows_forecast_condition).state.c_str()].c_str());
            }
            if (id(tomorrows_forecast_high).has_state()) {
              it.printf(230, 160, id(font2), id(my_white), TextAlign::TOP_LEFT, "%7.1f°", id(tomorrows_forecast_high).state);
            }
            if (id(tomorrows_forecast_low).has_state()) {
              it.printf(230, 190, id(font2), id(my_white), TextAlign::TOP_LEFT, "%7.1f°", id(tomorrows_forecast_low).state);
            }
          } else {
            it.printf(175, 135, id(font1), id(my_white), TextAlign::TOP_LEFT, "Todays Forecast:");
            if (id(todays_forecast_condition).has_state()) {
              it.printf(175, 155, id(font4), id(my_white), TextAlign::TOP_LEFT, weather_icon_map[id(todays_forecast_condition).state.c_str()].c_str());
            }
            if (id(todays_forecast_high).has_state()) {
              it.printf(230, 160, id(font2), id(my_white), TextAlign::TOP_LEFT, "%7.1f°", id(todays_forecast_high).state);
            }
            if (id(todays_forecast_low).has_state()) {
              it.printf(230, 190, id(font2), id(my_white), TextAlign::TOP_LEFT, "%7.1f°", id(todays_forecast_low).state);
            }
          }
          it.printf(65, 135, id(font3), id(my_golden), TextAlign::TOP_LEFT, "\U000F0F55");
          if (id(inside_temperature).has_state()) {
            it.printf(40, 165, id(font2), id(my_golden), TextAlign::TOP_LEFT, "%7.1f°", id(inside_temperature).state);
          }

      - id: temperatures
        lambda: |-
          it.printf(0, 0, id(fontlarge), TextAlign::BASELINE_LEFT , "Climate");
          // %.1f substitutes to 1 decimal place
          if (id(house_target_temperature).has_state()) {
            it.printf(0, 128, id(fontlarge), TextAlign::BASELINE_LEFT , "Target: %.1f°C", id(house_target_temperature).state);
          }

          if (id(house_average_temperature).has_state()) {
            it.printf(0, 192, id(fontlarge), TextAlign::BASELINE_LEFT , "Actual: %.1f°C", id(house_average_temperature).state);
          }

      - id: nextbin
        lambda: |-
          if (id(next_bin).has_state()) {
            // it.printf(0, 200, id(fontlarge), TextAlign::BASELINE_LEFT , id(next_bin).state);
            // it.printf(0, 220, id(fontlarge), "Hello World!");
            it.printf(0, 220, id(fontlarge), TextAlign::BASELINE_LEFT, "Bin: %s", id(next_bin).state.c_str());
          }

      - id: circle
        lambda: |-
          it.filled_circle(it.get_width() / 2, it.get_height() / 3, 30, COLOR_CSS_RED);

interval:
  - interval: 5s
    then:
      - display.page.show_next: my_display
      - component.update: my_display

# Define a PWM output on the ESP32
output:
  - platform: ledc
    pin: 32
    id: gpio_32_backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: gpio_32_backlight_pwm
    name: "ILI9341 Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON