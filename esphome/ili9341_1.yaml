packages:
  colors: !include common/colours.yaml


esphome:
  name: ili9341
  platform: ESP32
  board: nodemcu-32s

wifi:
  # ssid: !secret wifi_ssid
  # password: !secret wifi_pass
  ssid: Glasgownet
  password: always32
  # FIXME Needs AP details

captive_portal:

logger:

api:

ota:

web_server:

time:
  - platform: homeassistant
    id: esptime
    timezone: Europe/London

font:
  - file: 'slkscr.ttf'
    id: font1
    size: 8

  - file: 'BebasNeue-Regular.ttf'
    id: font2
    size: 20

  - file: 'arial.ttf'
    id: font3
    size: 14

  - file: 'BebasNeue-Regular.ttf'
    id: fontlarge
    size: 64

sensor:
  - platform: homeassistant
    id: internet_speed_in
    entity_id: sensor.internet_speed_in
    internal: true

  - platform: homeassistant
    id: internet_speed_out
    entity_id: sensor.internet_speed_out
    internal: true

  - platform: homeassistant
    id: house_average_temperature
    entity_id: sensor.house_average_temperature
    internal: true

  - platform: homeassistant
    id: house_target_temperature
    entity_id: sensor.house_target_temperature
    internal: true

text_sensor:
  - platform: homeassistant
    id: next_bin
    entity_id: sensor.next_bin
    internal: true

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

color:
  - id: my_red
    red: 100%
    green: 3%
    blue: 5%

image:
  - id: bin
    file: "delete-empty.png"
    type: RGB24

display:
  - id: my_display
    platform: ili9341
    model: "TFT 2.4"
    cs_pin: 5
    dc_pin: 27
    reset_pin: 33
    rotation: 270
    pages:
      - id: viewpoint
        lambda: |-
          // Print "Viewpoint" in top center.
          it.printf(32, 0, id(font1), TextAlign::TOP_CENTER, "Viewpoint");

          // Print time in HH:MM format
          it.strftime(it.get_width(), 26, id(fontlarge), TextAlign::CENTER_RIGHT, "%H:%M:%S", id(esptime).now());

          // it.rectangle(0,0,318,238,COLOR_CSS_WHITE);
          // it.rectangle(1,1,316,236,COLOR_CSS_WHITE);
          // it.horizontal_line(2,50,316,COLOR_CSS_BLUE);
          // it.horizontal_line(2,51,316,COLOR_CSS_BLUE);

      - id: temperatures
        lambda: |-
          it.printf(0, 0, id(fontlarge), TextAlign::BASELINE_LEFT , "Climate");
          // %.1f substitutes to 1 decimal place
          if (id(house_target_temperature).has_state()) {
            it.printf(0, 128, id(fontlarge), TextAlign::BASELINE_LEFT , "Target: %.1f°C", id(house_target_temperature).state);
          }

          if (id(house_average_temperature).has_state()) {
            it.printf(0, 192, id(fontlarge), TextAlign::BASELINE_LEFT , "Actual: %.1f°C", id(house_average_temperature).state);
          }

      - id: nextbin
        lambda: |-
          if (id(next_bin).has_state()) {
            // it.printf(0, 200, id(fontlarge), TextAlign::BASELINE_LEFT , id(next_bin).state);
            // it.printf(0, 220, id(fontlarge), "Hello World 2!");
            it.printf(0, 220, id(fontlarge), TextAlign::BASELINE_LEFT, "Bin: %s", id(next_bin).state.c_str());
          }

      - id: circle
        lambda: |-
          it.filled_circle(it.get_width() / 2, it.get_height() / 3, 30, COLOR_CSS_RED);

interval:
  - interval: 3s
    then:
      - display.page.show_next: my_display
      - component.update: my_display

# Define a PWM output on the ESP32
output:
  - platform: ledc
    pin: 32
    id: gpio_32_backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: gpio_32_backlight_pwm
    name: "ILI9341 Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON