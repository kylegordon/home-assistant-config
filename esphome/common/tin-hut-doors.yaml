---


### TODO

## Display On/Off when doors moving
## Restore last state of display


esphome:
  name: $device_name
  comment: $device_description
  friendly_name: $friendly_name
  platform: $platform
  board: $board
  on_boot:
    priority: -10
    then:
      - lambda: |-
          // check cover position
          if (id(open_endstop).state) // door open
          {
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(garage_door).position = esphome::cover::COVER_OPEN;
            id(last_dir) = esphome::cover::COVER_OPERATION_OPENING;
            id(garage_door).publish_state();
          }
          else if (id(close_endstop).state) // door closed
          {
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(garage_door).position = esphome::cover::COVER_CLOSED;
            id(last_dir) = esphome::cover::COVER_OPERATION_CLOSING;
            id(garage_door).publish_state();
          }
          else // door neither closed nor open 
          {
            // last dir not know, so let cover restore last state
          }

globals:
  - id: last_dir
    type: esphome::cover::CoverOperation
    restore_value: yes
    initial_value: esphome::cover::COVER_OPERATION_IDLE
  - id: target_action
    type: int
    restore_value: no
    initial_value: "3" # Idle: 0, Open: 1, Close: 2, None: 3
  - id: push_interval
    type: int
    restore_value: no
    initial_value: $push_interval
  - id: open_duration
    type: uint32_t
    restore_value: no
    initial_value: $open_duration
  - id: close_duration
    type: uint32_t
    restore_value: no
    initial_value: $close_duration

# Enable logging
logger:

web_server:

captive_portal:

syslog:
  ip_address: 172.24.32.13
  port: 515

time:
  - platform: homeassistant
    id: esptime
    timezone: Europe/London

font:
  - file: 'slkscr.ttf'
    id: font1
    size: 8

i2c:
  frequency: 800kHz
  sda: D2
  scl: D5
  scan: true

display:
  - platform: ssd1306_i2c
    id: oled
    model: "SH1106 128x64"
    # reset_pin: D0
    address: 0x3C
    lambda: |-
      static int yorigin = 0;
      static int lineheight = 9;

      //it.line(0, 0, 128, 0); // Top line
      //it.line(0, 0, 0, 128); // Left line
      //it.line(127, 0, 127, 64); // Right line
      //it.line(0, 63, 127, 63); // Bottom line

      int y = yorigin;
      // Print "viewpoint.house" in top center.
      it.printf(64, y, id(font1), TextAlign::TOP_CENTER, "Viewpoint.House");
      y = y+lineheight;
      it.line(25, y-1, it.get_width()-25, y-1);
      it.printf(0, y, id(font1), TextAlign::TOP_LEFT, "IP: %s", id(ip_address).state.c_str());
      y = y+lineheight;
      it.printf(0, y, id(font1), TextAlign::TOP_LEFT, "HA: %s", id(connection_status).state ? "Connected" : "Disconnected");
      y = y+lineheight;
      it.printf(0, y, id(font1), TextAlign::TOP_LEFT, "Relay state: %s", id(cover_switch).state ? "Open" : "Closed");
      y = y+lineheight;
      it.printf(0, y, id(font1), TextAlign::TOP_LEFT, "Lower Sensor: %s", id(close_endstop).state ? "Open" : "Closed");
      y = y+lineheight;
      it.printf(0, y, id(font1), TextAlign::TOP_LEFT, "Upper Sensor: %s", id(open_endstop).state ? "Open" : "Closed");

      // Print time in HH:MM format
      it.strftime(0, 60, id(font1), TextAlign::BASELINE_LEFT, "%H:%M", id(esptime).now());

# D0 == GPIO16 == Optional internal PullDOWN
# D1 == GPIO5 == Optional internal Pullup
# D2 == GPIO4 == Optional internal Pullup
# D3 == GPIO0 == Optional internal Pullup
# D4 == GPIO2 == Optional internal Pullup
# D5 == GPIO14 == Optional internal Pullup
# D6 == GPIO12 == Optional internal Pullup
# D7 == GPIO13 == Optional internal Pullup
# D8 == GPIO15 == Optional internal Pullup

binary_sensor:
  - platform: gpio
    pin:
      number: $open_endstop_pin
      mode: INPUT_PULLUP
      inverted: true
    name: "Open Endstop Sensor"
    id: open_endstop
    internal: false
    filters:
      - delayed_on_off: $debounce_time
    on_press:
      then:
        - lambda: |-
            // stop all current actions
            id(push_one).stop();
            // update states
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(garage_door).position = esphome::cover::COVER_OPEN;
            id(last_dir) = esphome::cover::COVER_OPERATION_OPENING;
            id(garage_door).publish_state();
    on_release:
      # door was commanded manually (not esphome)
      then:
        - lambda: |-          
            // set state as closing. This will start position update and reporting
            id(last_dir) = esphome::cover::COVER_OPERATION_CLOSING;
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_CLOSING;
            id(garage_door).publish_state();
  - platform: gpio
    pin:
      number: $close_endstop_pin
      mode: INPUT_PULLUP
      inverted: true
    name: "Close Endstop Sensor"
    id: close_endstop
    internal: false
    filters:
      - delayed_on_off: $debounce_time
    on_press:
      then:
        - lambda: |-
            // stop all current actions
            id(push_one).stop();
            // update states
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(garage_door).position = esphome::cover::COVER_CLOSED;
            id(last_dir) = esphome::cover::COVER_OPERATION_CLOSING;
            id(garage_door).publish_state();
    on_release:
      # door was commanded manually (not esphome)
      then:
        - lambda: |-
            // set state as opening. This will start position update and reporting
            id(last_dir) = esphome::cover::COVER_OPERATION_OPENING;
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_OPENING;
            id(garage_door).publish_state();
switch:
  - platform: gpio
    pin: $cover_switch_pin
    name: "Cover Switch"
    id: cover_switch
    internal: false
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: $active_switch_duration
      - switch.turn_off: cover_switch
  - platform: template
    name: "Display On/Off"
    id: display_on_off
    internal: false
    optimistic: true
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - lambda: |-
          id(oled).turn_on();
    turn_off_action:
      - lambda: |-
          id(oled).turn_off();

cover:
  - platform: template
    name: $friendly_name
    id: garage_door
    device_class: $cover_device_class
    optimistic: false
    has_position: true
    assumed_state: false
    # main loop
    lambda: |-
      static uint32_t last_recompute_time = 0;
      static uint32_t last_publish_time = 0;
      static uint32_t last_push_time = 0;
      // store current time
      const uint32_t now = millis();
      // recompute position
      if (id(garage_door).current_operation != COVER_OPERATION_IDLE)  // Door moving
      {
        float dir;
        float action_dur;
        // set dir and duration depending on current movement
        if (id(garage_door).current_operation == COVER_OPERATION_CLOSING)
        {
          // door closing
          dir = -1.0f;
          action_dur = id(close_duration);
        }
        else
        {
          // door opening
          dir = 1.0f;
          action_dur = id(open_duration);
        }
        // calculate position
        float position = id(garage_door).position;
        position += dir * (now - last_recompute_time) / action_dur;
        id(garage_door).position = clamp(position, 0.0f, 1.0f);
        // publish position every second
        if (now - last_publish_time > 1000)
        {
          id(garage_door).publish_state();
          last_publish_time = now;
        }
      }
      last_recompute_time = now;
      // push button if target action different than current operation
      if (id(target_action) != 3 && id(target_action) != id(garage_door).current_operation)
      {
        if (now - last_push_time > id(push_interval))
        {
          id(push_one).execute();
          last_push_time = now;
        }
      }
      else if (id(target_action) == id(garage_door).current_operation)
      {
        // target reached, set target as None (3).
        ESP_LOGD("target", "Target Reached");
        id(target_action) = 3;
      }
      return {};
    open_action:
      - logger.log:
          format: "Open Action - CO:%u PO:%f LD:%u"
          args: [ id(garage_door).current_operation, id(garage_door).position, id(last_dir) ]
      # update target
      - lambda: |-
          if (id(garage_door).position != COVER_OPEN)
          {
            id(target_action) = COVER_OPERATION_OPENING;
          }
    close_action:
      - logger.log:
          format: "Close Action - CO:%u PO:%f LD:%u"
          args: [ id(garage_door).current_operation, id(garage_door).position, id(last_dir) ]
      # update target
      - lambda: |-
          if (id(garage_door).position != COVER_CLOSED)
          {
            id(target_action) = COVER_OPERATION_CLOSING;
          }
    stop_action:
      - logger.log:
          format: "Stop Action - CO:%u PO:%f LD:%u"
          args: [ id(garage_door).current_operation, id(garage_door).position, id(last_dir) ]
      # update target
      - lambda: |-
          if (id(garage_door).position != COVER_OPEN && id(garage_door).position != COVER_CLOSED)
          {
            id(target_action) = COVER_OPERATION_IDLE;
          }
script:
  - id: push_one
    mode: single
    then:
      - logger.log: "Push 1 Times"
      - switch.turn_on: cover_switch
      # state machine
      - lambda: |-
          if (id(garage_door).current_operation == esphome::cover::COVER_OPERATION_OPENING || id(garage_door).current_operation == esphome::cover::COVER_OPERATION_CLOSING)
          {
            // door moving
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
          }
          else
          {
            // door idle
            if (id(last_dir) == esphome::cover::COVER_OPERATION_OPENING)
            {
              id(garage_door).current_operation = esphome::cover::COVER_OPERATION_CLOSING;
              id(last_dir) = esphome::cover::COVER_OPERATION_CLOSING;
            }
            else
            {
              id(garage_door).current_operation = esphome::cover::COVER_OPERATION_OPENING;
              id(last_dir) = esphome::cover::COVER_OPERATION_OPENING;
            }
          }
          id(garage_door).publish_state();