esphome:
  name: ${device_name}
  comment: ${device_description}
  platform: ESP8266
  board: d1_mini
  includes:
    - ClosedCube_OPT3001/ClosedCube_OPT3001.h
    - ClosedCube_OPT3001/ClosedCube_OPT3001.cpp
    - OPT3001.h

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  ap: #since we listed an SSID above, this AP mode will only enable if no WiFi connection could be made
    ssid: ${friendly_name}_AP
    password: !secret wifi_pass

captive_portal:

logger:
  level: DEBUG
  esp8266_store_log_strings_in_flash: False

api:

ota:

web_server:

syslog:
  ip_address: 172.24.32.13
  port: 515

time:
  - platform: homeassistant
    id: esptime
    timezone: Europe/London

i2c:
  sda: GPIO4
  scl: GPIO5
  scan: True

switch:
  - platform: restart
    name: "${friendly_name} Restart"

binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

text_sensor:
  # Reports the ESPHome Version with compile date
  - platform: version
    name: ${friendly_name} ESPHome Version

sensor:
  # Reports the WiFi signal strength
  - platform: wifi_signal
    name: ${friendly_name} Signal
    update_interval: 60s

  # Reports how long the device has been powered (in minutes)
  - platform: uptime
    name: ${friendly_name} Uptime
    filters:
      - lambda: return x / 60.0;
    unit_of_measurement: minutes

  - platform: custom
    lambda: |-
      auto opt3001 = new MyOPT3001();
      App.register_component(opt3001);
      return {opt3001->sensor_status, opt3001->manufacturer_id_sensor, opt3001->device_id_sensor, opt3001->high_limit_sensor, opt3001->low_limit_sensor, opt3001->lux_sensor};
    sensors:
    - name: "Sensor Status"
    - name: "Manufacturer ID"
    - name: "Device ID"
    - name: "Lux High Limit"
      unit_of_measurement: lx
    - name: "Lux Low Limit"
      unit_of_measurement: lx
    - name: "Lux Level"
      unit_of_measurement: lx


output:
  # Register the blue LED as a dimmable output ....
  - platform: esp8266_pwm
    id: blue_led
    pin: D4
    inverted: True

light:
  # ... and then make a light out of it.
  - platform: monochromatic
    name: "${friendly_name} Blue LED"
    id: blue_led_light
    output: blue_led

# Blink the light if we aren't connected to WiFi.
interval:
  - interval: 500ms
    then:
    - if:
        condition:
          not:
            wifi.connected:
        then:
          - light.turn_on:
              id: blue_led_light
              brightness: 50%
              transition_length: 0s
          - delay: 250ms
          - light.turn_off:
              id: blue_led_light
              transition_length: 250ms
