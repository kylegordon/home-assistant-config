---
packages:
  common: !include common.yaml
  syslog: !include syslog.yaml

esp8266:
  board: d1_mini

esphome:
  name: ${device_name}
  comment: ${device_description}
  friendly_name: ${friendly_name}

external_components:
  - source:
      type: local
      path: custom_components/OPT3001

captive_portal:

logger:
  level: DEBUG
  esp8266_store_log_strings_in_flash: false

web_server:

i2c:
  id: bus_a
  sda: GPIO4
  scl: GPIO5
  scan: true

sensor:
  - platform: custom
    # yamllint disable rule:line-length
    lambda: |-
      auto opt3001 = new MyOPT3001();
      App.register_component(opt3001);
      return {opt3001->sensor_status, opt3001->manufacturer_id_sensor, opt3001->device_id_sensor, opt3001->high_limit_sensor, opt3001->low_limit_sensor, opt3001->lux_sensor};
    # yamllint enable rule:line-length
    sensors:
      - name: "Sensor Status"
      - name: "Manufacturer ID"
      - name: "Device ID"
      - name: "Lux High Limit"
        unit_of_measurement: lx
      - name: "Lux Low Limit"
        unit_of_measurement: lx
      - name: "Lux Level"
        unit_of_measurement: lx
        icon: mdi:sun-wireless-outline

output:
  # Register the blue LED as a dimmable output ....
  - platform: esp8266_pwm
    id: blue_led
    pin: D4
    inverted: true

light:
  # ... and then make a light out of it.
  - platform: monochromatic
    name: "${friendly_name} Blue LED"
    id: blue_led_light
    output: blue_led

# Blink the light if we aren't connected to WiFi.
interval:
  - interval: 500ms
    then:
      - if:
          condition:
            not:
              wifi.connected:
          then:
            - light.turn_on:
                id: blue_led_light
                brightness: 50%
                transition_length: 0s
            - delay: 250ms
            - light.turn_off:
                id: blue_led_light
                transition_length: 250ms
