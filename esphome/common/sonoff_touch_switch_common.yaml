---
packages:
  common: !include common.yaml

esp8266:
  board: esp8285

esphome:
  name: ${device_name}
  comment: ${device_description}
  friendly_name: ${friendly_name}

captive_portal:

# Enable logging
logger:

syslog:
  udp_id: esphome_udp_syslog
  time_id: esptime

udp:
  id: esphome_udp_syslog
  addresses: 172.24.32.13
  port: 515

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    name: "${friendly_name} Touch Pad"
    on_multi_click:
      # triple click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
              # send double click event in case wifi and api are conncected
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      title: ${friendly_name} triple click
                      device_name: ${device_name}
                      click_type: triple
              # toggle relay in case either wifi or api are not connected
              else:
                - switch.toggle: sonoff_touch_relay
      # double click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
              # send double click event in case wifi and api are conncected
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      title: ${friendly_name} double click
                      device_name: ${device_name}
                      click_type: double
              # toggle relay in case either wifi or api are not connected
              else:
                - switch.toggle: sonoff_touch_relay
      # long click
      - timing:
          - ON for at least 1.5s
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
              # send long click event in case wifi and api are conncected
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      title: ${friendly_name} long click
                      device_name: ${device_name}
                      click_type: long
              # toggle relay in case either wifi or api are not connected
              else:
                - switch.toggle: sonoff_touch_relay
      # single click
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
              # send single click event in case wifi and api are conncected
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      title: ${friendly_name} short click
                      device_name: ${device_name}
                      click_type: single
              # toggle relay in case either wifi or api are not connected
              else:
                - switch.toggle: sonoff_touch_relay
    internal: true
    id: button_input

switch:
  - platform: gpio
    id: sonoff_touch_relay
    name: "${friendly_name} Relay"
    pin: GPIO12
    restore_mode: "${default_state}"

output:
  # Register the blue LED as a dimmable output ....
  - platform: esp8266_pwm
    id: blue_led
    pin: GPIO13
    inverted: true

light:
  # ... and then make a light out of it.
  - platform: monochromatic
    name: "${friendly_name} Blue LED"
    id: blue_led_light
    output: blue_led

# Blink the light if we aren't connected to WiFi.
interval:
  - interval: 500ms
    then:
    - if:
        condition:
          not:
            wifi.connected:
        then:
          - light.turn_on:
              id: blue_led_light
              brightness: 50%
              transition_length: 0s
          - delay: 250ms
          - light.turn_off:
              id: blue_led_light
              transition_length: 250ms
