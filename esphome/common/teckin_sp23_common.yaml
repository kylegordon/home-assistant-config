---

# Sourced from https://frenck.dev/calibrating-an-esphome-flashed-power-plug/
# and https://gist.github.com/timmo001/7b0cf9958b80f6356a3f47d2f29aa1a6
# TV manual and specs at https://www.manualslib.com/manual/650244/Panasonic-Viera-Th-D42ps81ea.html?page=51#manual

packages:
  common: !include common.yaml

esphome:
  name: ${device_name}
  comment: ${device_description}

esp8266:
  board: esp01_1m
  restore_from_flash: true

wifi:
  output_power: 18db
  power_save_mode: light
  ap:
    ssid: "${friendly_name}"

captive_portal:

debug:

# Enable logging
logger:
  level: debug

# Enable Web server
web_server:
  port: 80

time:
  - platform: homeassistant
    timezone: Europe/London

syslog:
  ip_address: 172.24.32.13
  port: 515

api:
  services:
    - service: calibrate_voltage
      variables:
        actual_value: float
      then:
        - lambda: |-
            id(voltage_multiply) = actual_value / id(voltage).raw_state;
        - number.set:
            id: voltage_factor
            value: !lambda "return id(voltage_multiply);"

    - service: calibrate_power
      variables:
        actual_value: float
      then:
        - lambda: |-
            id(power_multiply) = actual_value / id(power).raw_state;
        - number.set:
            id: power_factor
            value: !lambda "return id(power_multiply);"

    - service: calibrate_current
      variables:
        actual_value: float
      then:
        - lambda: |-
            id(current_multiply) = actual_value / id(current).raw_state;
        - number.set:
            id: current_factor
            value: !lambda "return id(current_multiply);"

globals:
  - id: voltage_multiply
    type: float
    restore_value: true
    initial_value: "0.3"

  - id: power_multiply
    type: float
    restore_value: true
    initial_value: "0.133"

  - id: current_multiply
    type: float
    restore_value: true
    initial_value: "0.805"

binary_sensor:
  # Push Button (Toggles Relay When Pressed)
  - platform: gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: true
    name: "Button"
    on_click:

      - max_length: 1s
        then:
          if:
            condition:
              switch.is_off: disable_button
            then:
              switch.toggle: relay

      - min_length: 1.5s
        max_length: 5s
        then:
          switch.toggle: disable_led

      - min_length: 8s
        max_length: 12s
        then:
          switch.toggle: disable_button

  - platform: status
    name: "Server Status"

# binary_sensor:
#   # Binary sensor for the button press
#   - platform: gpio
#     name: button
#     pin:
#       number: GPIO13
#       inverted: true
#     on_press:
#       - switch.toggle: relay

switch:
  # Relay (As Switch)
  - platform: gpio
    name: ""
    icon: "mdi:${main_icon}"
    pin: GPIO15
    id: relay
    restore_mode: "${default_state}"
    on_turn_on:
      if:
        condition:
          switch.is_off: disable_led
        then:
          light.turn_on:
            id: led
    on_turn_off:
      - light.turn_off:
          id: led

  - platform: template
    name: "Disable LED"
    id: disable_led
    icon: "mdi:led-variant-off"
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    on_turn_on:
      # Flash twice
      - light.turn_off: led
      - delay: 0.1s
      - light.turn_on: led
      - delay: 0.1s
      - light.turn_off: led
      - delay: 0.1s
      - light.turn_on: led
      - delay: 0.1s
      # Final state
      - light.turn_off: led
    on_turn_off:
      # Flash twice
      - light.turn_on: led
      - delay: 0.1s
      - light.turn_off: led
      - delay: 0.1s
      - light.turn_on: led
      - delay: 0.1s
      - light.turn_off: led
      - delay: 0.7s
      # Final state
      - if:
          condition:
            switch.is_on: relay
          then:
            light.turn_on: led

  - platform: template
    name: "Disable Button"
    id: disable_button
    icon: "mdi:toggle-switch-off-outline"
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    on_turn_on:
      # Flash thrice
      - light.turn_off: led
      - delay: 0.15s
      - light.turn_on: led
      - delay: 0.15s
      - light.turn_off: led
      - delay: 0.15s
      - light.turn_on: led
      - delay: 0.15s
      - light.turn_off: led
      - delay: 0.15s
      - light.turn_on: led
      - delay: 0.15s
      # Final state
      - if:
          condition:
            switch.is_off: relay
          then:
            light.turn_off: led
    on_turn_off:
      # Flash thrice
      - light.turn_on: led
      - delay: 0.15s
      - light.turn_off: led
      - delay: 0.15s
      - light.turn_on: led
      - delay: 0.15s
      - light.turn_off: led
      - delay: 0.15s
      - light.turn_on: led
      - delay: 0.15s
      - light.turn_off: led
      - delay: 0.7s
      # Final state
      - if:
          condition:
            switch.is_on: relay
          then:
            light.turn_on: led

# switch:
#   # Switch to toggle the relay
#   - platform: gpio
#     id: relay
#     name: ${friendly_name} Switch
#     pin: GPIO15
#     on_turn_on:
#       - light.turn_on: led
#     on_turn_off:
#       - light.turn_off: led

sensor:
  # WiFi Signal Sensor
  - platform: wifi_signal
    name: "WiFi Status"
    update_interval: 60s

  # Power Monitoring
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO5
    cf1_pin: GPIO14
    change_mode_every: 3
    update_interval: 6s

    voltage:
      name: "Voltage"
      id: voltage
      unit_of_measurement: V
      accuracy_decimals: 1
      filters:
        - lambda: return x * id(voltage_multiply);

    power:
      name: "Power"
      id: power
      unit_of_measurement: W
      accuracy_decimals: 0
      filters:
        - lambda: return x * id(power_multiply);

    current:
      name: "Current"
      id: current
      unit_of_measurement: A
      accuracy_decimals: 3
      filters:
        - lambda: return x * id(current_multiply);

  # Total daily energy sensor
  - platform: total_daily_energy
    name: "Daily Energy"
    power_id: power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

# sensor:
#   - platform: hlw8012
#     sel_pin:
#       number: GPIO12
#       inverted: true
#     cf_pin: GPIO05
#     cf1_pin: GPIO14
#     # Higher value gives lower watt readout
#     current_resistor: 0.00221
#     # Lower value gives lower voltage readout
#     voltage_divider: 871
#     change_mode_every: 3
#     update_interval: 1s
#     # Current sensor
#     current:
#       name: ${friendly_name} Current
#       unit_of_measurement: A
#       accuracy_decimals: 3
#       # filters:
#       #   # Map from sensor -> measured value
#       #   - calibrate_linear:
#       #       - 0.0 -> 0.013
#       #       - 0.08208 -> 0.071
#       #       - 1.34223 -> 1.066
#       #       - 5.57170 -> 4.408
#       #       - 6.69184 -> 5.259
#       #       - 6.97187 -> 5.540
#       #   # Make everything below 0.01A appear as just 0A.
#       #   # Furthermore it corrects 0.013A for the power usage of the plug.
#       #   - lambda: if (x < (0.01 - 0.013)) return 0; else return (x - 0.013);
#     # Voltage sensor
#     voltage:
#       name: ${friendly_name} Voltage
#       unit_of_measurement: V
#       accuracy_decimals: 1
#       # filters:
#       #   # Map from sensor -> measured value
#       #   - calibrate_linear:
#       #       - 0.0 -> 0.0
#       #       - 602.87506 -> 229.9
#       #       - 609.8 -> 232.8
#     # Power sensor
#     power:
#       id: power
#       name: ${friendly_name} Power
#       unit_of_measurement: W
#       accuracy_decimals: 0
#       # filters:
#       #   # Map from sensor -> measured value
#       #   - calibrate_linear:
#       #       - 0.0 -> 1.14
#       #       - 62.06167 -> 10.93
#       #       - 1503.27161 -> 247.6
#       #       - 1599.81213 -> 263.7
#       #       - 3923.67700 -> 631.4
#       #       - 7109.50928 -> 1148.0
#       #       - 7237.0857 -> 1193.0
#       #       - 7426.71338 -> 1217.0
#       #   # Make everything below 2W appear as just 0W.
#       #   # Furthermore it corrects 1.14W for the power usage of the plug.
#       #   - lambda: if (x < (2 + 1.14)) return 0; else return (x - 1.14);

# Make calibration factor data readable/setable from home assistant
number:
  - platform: template
    name: "Voltage Calibration Factor"
    id: voltage_factor
    icon: "mdi:sine-wave"
    min_value: 0
    max_value: 10
    step: 0.001
    entity_category: diagnostic
    mode: box
    lambda: |-
      return id(voltage_multiply);
    set_action:
      lambda: |-
        id(voltage_multiply) = x;

  - platform: template
    name: "Power Calibration Factor"
    id: power_factor
    icon: "mdi:flash"
    min_value: 0
    max_value: 10
    step: 0.001
    entity_category: diagnostic
    mode: box
    lambda: |-
      return id(power_multiply);
    set_action:
      lambda: |-
        id(power_multiply) = x;

  - platform: template
    name: "Current Calibration Factor"
    id: current_factor
    icon: "mdi:current-ac"
    min_value: 0
    max_value: 10
    step: 0.001
    entity_category: diagnostic
    mode: box
    lambda: |-
      return id(current_multiply);
    set_action:
      lambda: |-
        id(current_multiply) = x;

output:
  # Relay state led
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO2
      inverted: true

light:
  # Relay state light
  - platform: monochromatic
    output: state_led
    id: led

# Uses the red LED as a status indicator
status_led:
  pin:
    number: GPIO0
    inverted: true
