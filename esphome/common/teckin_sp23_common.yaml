---

# Sourced from https://frenck.dev/calibrating-an-esphome-flashed-power-plug/
# and https://gist.github.com/timmo001/7b0cf9958b80f6356a3f47d2f29aa1a6
# TV manual and specs at https://www.manualslib.com/manual/650244/Panasonic-Viera-Th-D42ps81ea.html?page=51#manual

packages:
  common: !include common.yaml

esphome:
  name: ${device_name}
  comment: ${device_description}
  platform: ESP8266
  board: esp01_1m
  on_boot:
    # Turn on power to attached device.
    then:
      - switch.turn_on: relay

wifi:
  output_power: 18db
  power_save_mode: light
  ap:
    ssid: "${friendly_name}"

captive_portal:

debug:

# Enable logging
logger:
  level: debug

# Enable Web server
web_server:
  port: 80

time:
  - platform: homeassistant
    timezone: Europe/London

syslog:
  ip_address: 172.24.32.13
  port: 515

api:
  services:
    - service: calibrate_voltage
      variables:
        actual_value: float
      then:
        - lambda: |-
            id(voltage_multiply) = actual_value / id(voltage).raw_state;
        - number.set:
            id: voltage_factor
            value: !lambda "return id(voltage_multiply);"

    - service: calibrate_power
      variables:
        actual_value: float
      then:
        - lambda: |-
            id(power_multiply) = actual_value / id(power).raw_state;
        - number.set:
            id: power_factor
            value: !lambda "return id(power_multiply);"

    - service: calibrate_current
      variables:
        actual_value: float
      then:
        - lambda: |-
            id(current_multiply) = actual_value / id(current).raw_state;
        - number.set:
            id: current_factor
            value: !lambda "return id(current_multiply);"

globals:
  - id: voltage_multiply
    type: float
    restore_value: true
    initial_value: "0.3"

  - id: power_multiply
    type: float
    restore_value: true
    initial_value: "0.133"

  - id: current_multiply
    type: float
    restore_value: true
    initial_value: "0.805"

sensor:
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO05
    cf1_pin: GPIO14
    # Higher value gives lower watt readout
    current_resistor: 0.00221
    # Lower value gives lower voltage readout
    voltage_divider: 871
    change_mode_every: 3
    update_interval: 1s
    # Current sensor
    current:
      name: ${friendly_name} Current
      unit_of_measurement: A
      accuracy_decimals: 3
      # filters:
      #   # Map from sensor -> measured value
      #   - calibrate_linear:
      #       - 0.0 -> 0.013
      #       - 0.08208 -> 0.071
      #       - 1.34223 -> 1.066
      #       - 5.57170 -> 4.408
      #       - 6.69184 -> 5.259
      #       - 6.97187 -> 5.540
      #   # Make everything below 0.01A appear as just 0A.
      #   # Furthermore it corrects 0.013A for the power usage of the plug.
      #   - lambda: if (x < (0.01 - 0.013)) return 0; else return (x - 0.013);
    # Voltage sensor
    voltage:
      name: ${friendly_name} Voltage
      unit_of_measurement: V
      accuracy_decimals: 1
      # filters:
      #   # Map from sensor -> measured value
      #   - calibrate_linear:
      #       - 0.0 -> 0.0
      #       - 602.87506 -> 229.9
      #       - 609.8 -> 232.8
    # Power sensor
    power:
      id: power
      name: ${friendly_name} Power
      unit_of_measurement: W
      accuracy_decimals: 0
      # filters:
      #   # Map from sensor -> measured value
      #   - calibrate_linear:
      #       - 0.0 -> 1.14
      #       - 62.06167 -> 10.93
      #       - 1503.27161 -> 247.6
      #       - 1599.81213 -> 263.7
      #       - 3923.67700 -> 631.4
      #       - 7109.50928 -> 1148.0
      #       - 7237.0857 -> 1193.0
      #       - 7426.71338 -> 1217.0
      #   # Make everything below 2W appear as just 0W.
      #   # Furthermore it corrects 1.14W for the power usage of the plug.
      #   - lambda: if (x < (2 + 1.14)) return 0; else return (x - 1.14);

binary_sensor:
  # Binary sensor for the button press
  - platform: gpio
    name: button
    pin:
      number: GPIO13
      inverted: true
    on_press:
      - switch.toggle: relay

switch:
  # Switch to toggle the relay
  - platform: gpio
    id: relay
    name: ${friendly_name} Switch
    pin: GPIO15
    on_turn_on:
      - light.turn_on: led
    on_turn_off:
      - light.turn_off: led

output:
  # Relay state led
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO2
      inverted: true

light:
  # Relay state light
  - platform: monochromatic
    output: state_led
    id: led

# Uses the red LED as a status indicator
status_led:
  pin:
    number: GPIO0
    inverted: true
