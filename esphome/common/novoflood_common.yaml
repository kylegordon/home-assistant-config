---
# Common code for Novostella 20W Flood Lights

# Credit to https://esphome-configs.io/devices/novostella-20w/

# Novostella 20W Flood Light, https://smile.amazon.com/gp/product/B07VH1VHYL
# https://fccid.io/2AI5T-SFGD-002
# https://blakadder.github.io/templates/novostella_20W_flood.html

packages:
  common: !include common.yaml

esphome:
  name: ${device_name}
  comment: ${device_description}
  friendly_name: ${friendly_name}
  platform: ESP8266
  board: esp01_1m

captive_portal:

# Enable logging
logger:
  baud_rate: 0  # disable UART logging since we aren't connected to GPIO1 TX


# Enable web server
web_server:
  port: 80

syslog:
  ip_address: 172.24.32.13
  port: 515

output:
  - platform: esp8266_pwm
    id: red
    pin: GPIO4
    inverted: false
  - platform: esp8266_pwm
    id: green
    pin: GPIO12
    inverted: false
  - platform: esp8266_pwm
    id: blue
    pin: GPIO14
    inverted: false
  - platform: esp8266_pwm
    id: cold_white
    pin: GPIO5
    inverted: false
  - platform: esp8266_pwm
    id: warm_white
    pin: GPIO13
    inverted: false

light:
  - platform: rgbww
    name: ${friendly_name}
    red: red
    green: green
    blue: blue
    cold_white: cold_white
    warm_white: warm_white
    cold_white_color_temperature: 6500 K
    warm_white_color_temperature: 2700 K
    id: thelight
    effects:
      - random:
      - strobe:
      - flicker:
          # The percentage that the last color value should affect the light.
          # More or less the “forget-factor” of an exponential moving average.
          # Defaults to 95%.
          alpha: 50%
          # The intensity of the flickering, basically the maximum amplitude of
          # the random offsets. Defaults to 1.5%.
          intensity: 50%
      - lambda:
          name: Throb
          update_interval: 1s
          lambda: |-
            static int state = 0;
            auto call = id(thelight).turn_on();
            // Transtion of 1000ms = 1s
            call.set_transition_length(1000);
            if (state == 0) {
              call.set_brightness(1.0);
            } else {
              call.set_brightness(0.01);
            }
            call.perform();
            state += 1;
            if (state == 2)
              state = 0;
